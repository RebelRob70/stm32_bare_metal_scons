# NB! gnu arm toolchain must already be in system path.
#
# Please select your processor-derivative below, the available choices are:
#  STM32F10X_LD     STM32F10X_LD: STM32 Low density devices
#  STM32F10X_LD_VL  STM32F10X_LD_VL: STM32 Low density Value Line devices
#  STM32F10X_MD     STM32F10X_MD: STM32 Medium density devices
#  STM32F10X_MD_VL  STM32F10X_MD_VL: STM32 Medium density Value Line devices
#  STM32F10X_HD     STM32F10X_HD: STM32 High density devices
#  STM32F10X_HD_VL  STM32F10X_HD_VL: STM32 High density value line devices
#  STM32F10X_XL     STM32F10X_XL: STM32 XL-density devices
#  STM32F10X_CL     STM32F10X_CL: STM32 Connectivity line devices
#
# - Low-density devices are STM32F101xx, STM32F102xx and STM32F103xx microcontrollers
#   where the Flash memory density ranges between 16 and 32 Kbytes.
# - Low-density value line devices are STM32F100xx microcontrollers where the Flash
#   memory density ranges between 16 and 32 Kbytes.
# - Medium-density devices are STM32F101xx, STM32F102xx and STM32F103xx microcontrollers
#   where the Flash memory density ranges between 64 and 128 Kbytes.
# - Medium-density value line devices are STM32F100xx microcontrollers where the 
#   Flash memory density ranges between 64 and 128 Kbytes.   
# - High-density devices are STM32F101xx and STM32F103xx microcontrollers where
#   the Flash memory density ranges between 256 and 512 Kbytes.
# - High-density value line devices are STM32F100xx microcontrollers where the 
#   Flash memory density ranges between 256 and 512 Kbytes.   
# - XL-density devices are STM32F101xx and STM32F103xx microcontrollers where
#   the Flash memory density ranges between 512 and 1024 Kbytes.
# - Connectivity line devices are STM32F105xx and STM32F107xx microcontrollers.
PROCESSOR_DERIVATIVE = 'STM32F10X_MD'
import os
env = Environment(tools = ['gcc', 'gnulink'], ENV = os.environ)

env['AR'] = 'arm-none-eabi-ar'
env['AS'] = 'arm-none-eabi-as'
env['CC'] = 'arm-none-eabi-gcc'
env['CXX'] = 'arm-none-eabi-g++'
env['LINK'] = 'arm-none-eabi-g++'                # predefined is 'arm-none-eabi-gcc'
env['RANLIB'] = 'arm-none-eabi-ranlib'
env['OBJCOPY'] = 'arm-none-eabi-objcopy'
env['PROGSUFFIX'] = '.elf'

# C-defines
env.Append( CPPDEFINES = [
    PROCESSOR_DERIVATIVE,
    'USE_STDPERIPH_DRIVER',
    'USE_FULL_ASSERT',
])

# Include locations
env.Append( CPPPATH = [
    'Libraries/CMSIS/CM3/CoreSupport/',
    'Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x',
    'Libraries/STM32F10x_StdPeriph_Driver/inc/',
    'Project/',
])

# Compiler flags
env.Append( CCFLAGS = [
    '-mcpu=cortex-m3',
    '-mthumb',
    '-O0', # Do not optimize-code (Level 0)
    '-g', # Generate debug-information
    '-ffunction-sections', # Remove un-used functions
    '-fdata-sections', # Remove un-used data
    '-std=gnu11',
    '-mlittle-endian',
    '-fno-exceptions',
    '--specs=nano.specs',
    '-Wall'
])

# Linker flags
env.Append( LINKFLAGS = [
    '-mthumb',
    '-mcpu=cortex-m3',
    '-specs=nosys.specs',
    '-static',
    '-Wl,-cref,-u,Reset_Handler',
    '-Wl,-Map=main.map',
    '-Wl,--gc-sections',
    '-Wl,--defsym=malloc_getpagesize_P=0x80',
    '-Wl,--start-group',
    '-lc',
    '-lm',
    '-Wl,--end-group',
    '-specs=nano.specs',
    '-TProject/Linker/' + PROCESSOR_DERIVATIVE + '_LINKER.ld',
]) 

startup_file_name = 'startup_' + PROCESSOR_DERIVATIVE.lower() + '.s'
# Source locations
source = [
        'Project/main.c',
        'Project/stm32f10x_it.c',
        'Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/startup/' + startup_file_name,
        'Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.c',
]

# build everything
prg = env.Program( target = 'main', source = source )