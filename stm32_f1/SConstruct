# NB! gnu arm toolchain must already be in system path.

import os
env = Environment(tools = ['gcc', 'gnulink'], ENV = os.environ)

env['AR'] = 'arm-none-eabi-ar'
env['AS'] = 'arm-none-eabi-as'
env['CC'] = 'arm-none-eabi-gcc'
env['CXX'] = 'arm-none-eabi-g++'
env['LINK'] = 'arm-none-eabi-g++'                # predefined is 'arm-none-eabi-gcc'
env['RANLIB'] = 'arm-none-eabi-ranlib'
env['OBJCOPY'] = 'arm-none-eabi-objcopy'
env['PROGSUFFIX'] = '.elf'

# C-defines
env.Append( CPPDEFINES = [
    'STM32F10X_MD',
    'USE_STDPERIPH_DRIVER',
    'USE_FULL_ASSERT',
])

# Include locations
env.Append( CPPPATH = [
    'Libraries/CMSIS/CM3/CoreSupport/',
    'Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x',
    'Libraries/STM32F10x_StdPeriph_Driver/inc/',
    'Project/',
])

# Compiler flags
env.Append( CCFLAGS = [
    '-mcpu=cortex-m3',
    '-mthumb',
    '-O0', # Do not optimize-code (Level 0)
    '-g', # Generate debug-information
    '-ffunction-sections', # Remove un-used functions
    '-fdata-sections', # Remove un-used data
    '-std=gnu11',
    '-mlittle-endian',
    '-fno-exceptions',
    '--specs=nano.specs',
    '-Wall'
])

# Linker flags
env.Append( LINKFLAGS = [
    '-mthumb',
    '-mcpu=cortex-m3',
    '-specs=nosys.specs',
    '-static',
    '-Wl,-cref,-u,Reset_Handler',
    '-Wl,-Map=main.map',
    '-Wl,--gc-sections',
    '-Wl,--defsym=malloc_getpagesize_P=0x80',
    '-Wl,--start-group',
    '-lc',
    '-lm',
    '-Wl,--end-group',
    '-specs=nano.specs',
    '-TProject/Linker/STM32F10X_MD_LINKER.ld',
]) 

# Source locations
source = [
        'Project/main.c',
        'Project/stm32f10x_it.c',
        'Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/startup/startup_stm32f10x_md.s',
        'Libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.c',
]

# build everything
prg = env.Program( target = 'main', source = source )